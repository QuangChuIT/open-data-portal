/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.vnpt.data.cms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

import vn.vnpt.data.cms.model.CatalogFieldName;
import vn.vnpt.data.cms.model.CatalogFieldNameModel;
import vn.vnpt.data.cms.model.CatalogFieldNameSoap;

/**
 * The base model implementation for the CatalogFieldName service. Represents a row in the &quot;VNPT_CatalogFieldName&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CatalogFieldNameModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CatalogFieldNameImpl}.
 * </p>
 *
 * @author vnpt
 * @see CatalogFieldNameImpl
 * @generated
 */
@JSON(strict = true)
public class CatalogFieldNameModelImpl
	extends BaseModelImpl<CatalogFieldName> implements CatalogFieldNameModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a catalog field name model instance should use the <code>CatalogFieldName</code> interface instead.
	 */
	public static final String TABLE_NAME = "VNPT_CatalogFieldName";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"entryId", Types.BIGINT},
		{"code_", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"dataType", Types.VARCHAR}, {"format", Types.VARCHAR},
		{"defaultValue", Types.VARCHAR}, {"notNull", Types.BOOLEAN},
		{"hiddenStatus", Types.BOOLEAN}, {"isSearch", Types.BOOLEAN},
		{"catalogId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("format", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("defaultValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notNull", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hiddenStatus", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isSearch", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("catalogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table VNPT_CatalogFieldName (uuid_ VARCHAR(75) null,entryId LONG not null primary key,code_ VARCHAR(75) null,name STRING null,dataType VARCHAR(75) null,format VARCHAR(75) null,defaultValue VARCHAR(75) null,notNull BOOLEAN,hiddenStatus BOOLEAN,isSearch BOOLEAN,catalogId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table VNPT_CatalogFieldName";

	public static final String ORDER_BY_JPQL =
		" ORDER BY catalogFieldName.entryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY VNPT_CatalogFieldName.entryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CATALOGID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HIDDENSTATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISSEARCH_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENTRYID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static CatalogFieldName toModel(CatalogFieldNameSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CatalogFieldName model = new CatalogFieldNameImpl();

		model.setUuid(soapModel.getUuid());
		model.setEntryId(soapModel.getEntryId());
		model.setCode(soapModel.getCode());
		model.setName(soapModel.getName());
		model.setDataType(soapModel.getDataType());
		model.setFormat(soapModel.getFormat());
		model.setDefaultValue(soapModel.getDefaultValue());
		model.setNotNull(soapModel.isNotNull());
		model.setHiddenStatus(soapModel.isHiddenStatus());
		model.setIsSearch(soapModel.isIsSearch());
		model.setCatalogId(soapModel.getCatalogId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<CatalogFieldName> toModels(
		CatalogFieldNameSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<CatalogFieldName> models = new ArrayList<CatalogFieldName>(
			soapModels.length);

		for (CatalogFieldNameSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CatalogFieldNameModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CatalogFieldName.class;
	}

	@Override
	public String getModelClassName() {
		return CatalogFieldName.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CatalogFieldName, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CatalogFieldName, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CatalogFieldName, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CatalogFieldName)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CatalogFieldName, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CatalogFieldName, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CatalogFieldName)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CatalogFieldName, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CatalogFieldName, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CatalogFieldName>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CatalogFieldName.class.getClassLoader(), CatalogFieldName.class,
			ModelWrapper.class);

		try {
			Constructor<CatalogFieldName> constructor =
				(Constructor<CatalogFieldName>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CatalogFieldName, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CatalogFieldName, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CatalogFieldName, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<CatalogFieldName, Object>>();
		Map<String, BiConsumer<CatalogFieldName, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<CatalogFieldName, ?>>();

		attributeGetterFunctions.put("uuid", CatalogFieldName::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CatalogFieldName, String>)CatalogFieldName::setUuid);
		attributeGetterFunctions.put("entryId", CatalogFieldName::getEntryId);
		attributeSetterBiConsumers.put(
			"entryId",
			(BiConsumer<CatalogFieldName, Long>)CatalogFieldName::setEntryId);
		attributeGetterFunctions.put("code", CatalogFieldName::getCode);
		attributeSetterBiConsumers.put(
			"code",
			(BiConsumer<CatalogFieldName, String>)CatalogFieldName::setCode);
		attributeGetterFunctions.put("name", CatalogFieldName::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<CatalogFieldName, String>)CatalogFieldName::setName);
		attributeGetterFunctions.put("dataType", CatalogFieldName::getDataType);
		attributeSetterBiConsumers.put(
			"dataType",
			(BiConsumer<CatalogFieldName, String>)
				CatalogFieldName::setDataType);
		attributeGetterFunctions.put("format", CatalogFieldName::getFormat);
		attributeSetterBiConsumers.put(
			"format",
			(BiConsumer<CatalogFieldName, String>)CatalogFieldName::setFormat);
		attributeGetterFunctions.put(
			"defaultValue", CatalogFieldName::getDefaultValue);
		attributeSetterBiConsumers.put(
			"defaultValue",
			(BiConsumer<CatalogFieldName, String>)
				CatalogFieldName::setDefaultValue);
		attributeGetterFunctions.put("notNull", CatalogFieldName::getNotNull);
		attributeSetterBiConsumers.put(
			"notNull",
			(BiConsumer<CatalogFieldName, Boolean>)
				CatalogFieldName::setNotNull);
		attributeGetterFunctions.put(
			"hiddenStatus", CatalogFieldName::getHiddenStatus);
		attributeSetterBiConsumers.put(
			"hiddenStatus",
			(BiConsumer<CatalogFieldName, Boolean>)
				CatalogFieldName::setHiddenStatus);
		attributeGetterFunctions.put("isSearch", CatalogFieldName::getIsSearch);
		attributeSetterBiConsumers.put(
			"isSearch",
			(BiConsumer<CatalogFieldName, Boolean>)
				CatalogFieldName::setIsSearch);
		attributeGetterFunctions.put(
			"catalogId", CatalogFieldName::getCatalogId);
		attributeSetterBiConsumers.put(
			"catalogId",
			(BiConsumer<CatalogFieldName, Long>)CatalogFieldName::setCatalogId);
		attributeGetterFunctions.put("groupId", CatalogFieldName::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CatalogFieldName, Long>)CatalogFieldName::setGroupId);
		attributeGetterFunctions.put(
			"companyId", CatalogFieldName::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CatalogFieldName, Long>)CatalogFieldName::setCompanyId);
		attributeGetterFunctions.put("userId", CatalogFieldName::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CatalogFieldName, Long>)CatalogFieldName::setUserId);
		attributeGetterFunctions.put("userName", CatalogFieldName::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CatalogFieldName, String>)
				CatalogFieldName::setUserName);
		attributeGetterFunctions.put(
			"createDate", CatalogFieldName::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CatalogFieldName, Date>)
				CatalogFieldName::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CatalogFieldName::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CatalogFieldName, Date>)
				CatalogFieldName::setModifiedDate);
		attributeGetterFunctions.put("status", CatalogFieldName::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<CatalogFieldName, Integer>)CatalogFieldName::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", CatalogFieldName::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<CatalogFieldName, Long>)
				CatalogFieldName::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", CatalogFieldName::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<CatalogFieldName, String>)
				CatalogFieldName::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", CatalogFieldName::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<CatalogFieldName, Date>)
				CatalogFieldName::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEntryId() {
		return _entryId;
	}

	@Override
	public void setEntryId(long entryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entryId = entryId;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_code = code;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getName(), languageId, useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(
				LocalizationUtil.updateLocalization(
					getName(), "Name", name, languageId, defaultLanguageId));
		}
		else {
			setName(
				LocalizationUtil.removeLocalization(
					getName(), "Name", languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(
			LocalizationUtil.updateLocalization(
				nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDataType() {
		if (_dataType == null) {
			return "";
		}
		else {
			return _dataType;
		}
	}

	@Override
	public void setDataType(String dataType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataType = dataType;
	}

	@JSON
	@Override
	public String getFormat() {
		if (_format == null) {
			return "";
		}
		else {
			return _format;
		}
	}

	@Override
	public void setFormat(String format) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_format = format;
	}

	@JSON
	@Override
	public String getDefaultValue() {
		if (_defaultValue == null) {
			return "";
		}
		else {
			return _defaultValue;
		}
	}

	@Override
	public void setDefaultValue(String defaultValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_defaultValue = defaultValue;
	}

	@JSON
	@Override
	public boolean getNotNull() {
		return _notNull;
	}

	@JSON
	@Override
	public boolean isNotNull() {
		return _notNull;
	}

	@Override
	public void setNotNull(boolean notNull) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notNull = notNull;
	}

	@JSON
	@Override
	public boolean getHiddenStatus() {
		return _hiddenStatus;
	}

	@JSON
	@Override
	public boolean isHiddenStatus() {
		return _hiddenStatus;
	}

	@Override
	public void setHiddenStatus(boolean hiddenStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hiddenStatus = hiddenStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalHiddenStatus() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("hiddenStatus"));
	}

	@JSON
	@Override
	public boolean getIsSearch() {
		return _isSearch;
	}

	@JSON
	@Override
	public boolean isIsSearch() {
		return _isSearch;
	}

	@Override
	public void setIsSearch(boolean isSearch) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isSearch = isSearch;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsSearch() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isSearch"));
	}

	@JSON
	@Override
	public long getCatalogId() {
		return _catalogId;
	}

	@Override
	public void setCatalogId(long catalogId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_catalogId = catalogId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCatalogId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("catalogId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CatalogFieldName.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CatalogFieldName.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			CatalogFieldName.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public CatalogFieldName toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CatalogFieldName>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CatalogFieldNameImpl catalogFieldNameImpl = new CatalogFieldNameImpl();

		catalogFieldNameImpl.setUuid(getUuid());
		catalogFieldNameImpl.setEntryId(getEntryId());
		catalogFieldNameImpl.setCode(getCode());
		catalogFieldNameImpl.setName(getName());
		catalogFieldNameImpl.setDataType(getDataType());
		catalogFieldNameImpl.setFormat(getFormat());
		catalogFieldNameImpl.setDefaultValue(getDefaultValue());
		catalogFieldNameImpl.setNotNull(isNotNull());
		catalogFieldNameImpl.setHiddenStatus(isHiddenStatus());
		catalogFieldNameImpl.setIsSearch(isIsSearch());
		catalogFieldNameImpl.setCatalogId(getCatalogId());
		catalogFieldNameImpl.setGroupId(getGroupId());
		catalogFieldNameImpl.setCompanyId(getCompanyId());
		catalogFieldNameImpl.setUserId(getUserId());
		catalogFieldNameImpl.setUserName(getUserName());
		catalogFieldNameImpl.setCreateDate(getCreateDate());
		catalogFieldNameImpl.setModifiedDate(getModifiedDate());
		catalogFieldNameImpl.setStatus(getStatus());
		catalogFieldNameImpl.setStatusByUserId(getStatusByUserId());
		catalogFieldNameImpl.setStatusByUserName(getStatusByUserName());
		catalogFieldNameImpl.setStatusDate(getStatusDate());

		catalogFieldNameImpl.resetOriginalValues();

		return catalogFieldNameImpl;
	}

	@Override
	public int compareTo(CatalogFieldName catalogFieldName) {
		int value = 0;

		if (getEntryId() < catalogFieldName.getEntryId()) {
			value = -1;
		}
		else if (getEntryId() > catalogFieldName.getEntryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CatalogFieldName)) {
			return false;
		}

		CatalogFieldName catalogFieldName = (CatalogFieldName)object;

		long primaryKey = catalogFieldName.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CatalogFieldName> toCacheModel() {
		CatalogFieldNameCacheModel catalogFieldNameCacheModel =
			new CatalogFieldNameCacheModel();

		catalogFieldNameCacheModel.uuid = getUuid();

		String uuid = catalogFieldNameCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			catalogFieldNameCacheModel.uuid = null;
		}

		catalogFieldNameCacheModel.entryId = getEntryId();

		catalogFieldNameCacheModel.code = getCode();

		String code = catalogFieldNameCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			catalogFieldNameCacheModel.code = null;
		}

		catalogFieldNameCacheModel.name = getName();

		String name = catalogFieldNameCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			catalogFieldNameCacheModel.name = null;
		}

		catalogFieldNameCacheModel.dataType = getDataType();

		String dataType = catalogFieldNameCacheModel.dataType;

		if ((dataType != null) && (dataType.length() == 0)) {
			catalogFieldNameCacheModel.dataType = null;
		}

		catalogFieldNameCacheModel.format = getFormat();

		String format = catalogFieldNameCacheModel.format;

		if ((format != null) && (format.length() == 0)) {
			catalogFieldNameCacheModel.format = null;
		}

		catalogFieldNameCacheModel.defaultValue = getDefaultValue();

		String defaultValue = catalogFieldNameCacheModel.defaultValue;

		if ((defaultValue != null) && (defaultValue.length() == 0)) {
			catalogFieldNameCacheModel.defaultValue = null;
		}

		catalogFieldNameCacheModel.notNull = isNotNull();

		catalogFieldNameCacheModel.hiddenStatus = isHiddenStatus();

		catalogFieldNameCacheModel.isSearch = isIsSearch();

		catalogFieldNameCacheModel.catalogId = getCatalogId();

		catalogFieldNameCacheModel.groupId = getGroupId();

		catalogFieldNameCacheModel.companyId = getCompanyId();

		catalogFieldNameCacheModel.userId = getUserId();

		catalogFieldNameCacheModel.userName = getUserName();

		String userName = catalogFieldNameCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			catalogFieldNameCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			catalogFieldNameCacheModel.createDate = createDate.getTime();
		}
		else {
			catalogFieldNameCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			catalogFieldNameCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			catalogFieldNameCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		catalogFieldNameCacheModel.status = getStatus();

		catalogFieldNameCacheModel.statusByUserId = getStatusByUserId();

		catalogFieldNameCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = catalogFieldNameCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			catalogFieldNameCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			catalogFieldNameCacheModel.statusDate = statusDate.getTime();
		}
		else {
			catalogFieldNameCacheModel.statusDate = Long.MIN_VALUE;
		}

		return catalogFieldNameCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CatalogFieldName, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CatalogFieldName, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CatalogFieldName, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CatalogFieldName)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CatalogFieldName, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CatalogFieldName, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CatalogFieldName, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CatalogFieldName)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CatalogFieldName>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _entryId;
	private String _code;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _dataType;
	private String _format;
	private String _defaultValue;
	private boolean _notNull;
	private boolean _hiddenStatus;
	private boolean _isSearch;
	private long _catalogId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CatalogFieldName, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CatalogFieldName)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("entryId", _entryId);
		_columnOriginalValues.put("code_", _code);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("dataType", _dataType);
		_columnOriginalValues.put("format", _format);
		_columnOriginalValues.put("defaultValue", _defaultValue);
		_columnOriginalValues.put("notNull", _notNull);
		_columnOriginalValues.put("hiddenStatus", _hiddenStatus);
		_columnOriginalValues.put("isSearch", _isSearch);
		_columnOriginalValues.put("catalogId", _catalogId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("code_", "code");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("entryId", 2L);

		columnBitmasks.put("code_", 4L);

		columnBitmasks.put("name", 8L);

		columnBitmasks.put("dataType", 16L);

		columnBitmasks.put("format", 32L);

		columnBitmasks.put("defaultValue", 64L);

		columnBitmasks.put("notNull", 128L);

		columnBitmasks.put("hiddenStatus", 256L);

		columnBitmasks.put("isSearch", 512L);

		columnBitmasks.put("catalogId", 1024L);

		columnBitmasks.put("groupId", 2048L);

		columnBitmasks.put("companyId", 4096L);

		columnBitmasks.put("userId", 8192L);

		columnBitmasks.put("userName", 16384L);

		columnBitmasks.put("createDate", 32768L);

		columnBitmasks.put("modifiedDate", 65536L);

		columnBitmasks.put("status", 131072L);

		columnBitmasks.put("statusByUserId", 262144L);

		columnBitmasks.put("statusByUserName", 524288L);

		columnBitmasks.put("statusDate", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CatalogFieldName _escapedModel;

}